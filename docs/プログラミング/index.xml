<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミングs on ちょいハック</title>
    <link>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
    <description>Recent content in プログラミングs on ちょいハック</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 08 Mar 2021 09:16:57 +0900</lastBuildDate><atom:link href="https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo GithubPagesで公開</title>
      <link>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-githubpages/</link>
      <pubDate>Mon, 08 Mar 2021 09:16:57 +0900</pubDate>
      
      <guid>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-githubpages/</guid>
      <description>Githubは、GithubPagesという機能があり、docsディレクトリを公開することができます。
Publicなリポジトリだけの機能です。
この機能を使って、Hugoで作ったウェブサイトを独自ドメインで公開していきます。
出力ディレクトリを設定 Hugoで出力するディレクトリをdocsディレクトリにする必要があります。
config.tomlに以下の設定を追加することで出力先を設定できます。
publishDir = &amp;quot;docs&amp;quot; 本番用のビルド設定 Hugoではディレクトリによって、環境独自の設定を追加できます。
config ┣ config.toml // デフォルトの設定 ┣ production ┃ ┗ config.toml // 本番用の設定 ┗ development ┗ config.toml // 開発用の設定 GithubPagesではサブディレクトリが公開されるので、baseurlで調整します。 以下の要領で、本番の設定をします。
baseurl = &amp;quot;https://example.com/repo_name/&amp;quot; # URL canonifyurls = true # aタグなどのリンクを絶対パスにする場合はtrue GoogleDomainsでドメインを取得 独自ドメインを設定したいので、取得します。 Google Domainsを使いました。
Google Domainsの特徴は以下です。
 全て込み（メール転送、プライバシー設定など）のシンプルな料金体系で1050[円/年]~ Googleの安定したインフラ サブドメインの管理が簡単  私が取得したドメインは1400[円/年]でした。
GoogleDomainsの設定 GithubPagesに独自ドメインを設定する方法は2つあるようなのです。
 Aレコード（Address Record）:
独自ドメインにIPアドレスを紐付けます。独自ドメインにアクセスした時に、指定されたIPアドレスにアクセスできるようになります。 CNAME（Canonical NAME）:
Canonicalは規準的なという意味です。ホスト名の別名を定義することができます。
別名のホスト名でアクセスされた場合、正規ホスト名に転送します。  Aレコードの場合、Githubが指定しているIPアドレスを紐付けることになります。
CNAMEの場合、xxx.github.io のようなGithubのホスト名に対して、別名を設定することになります。
※ GoogleDomainsは仕様上Aレコードでしか対応できないようです。
Aレコードで指定する https://domains.</description>
    </item>
    
    <item>
      <title>HugoのTomlの書き方</title>
      <link>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-toml/</link>
      <pubDate>Fri, 26 Feb 2021 11:35:35 +0900</pubDate>
      
      <guid>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-toml/</guid>
      <description>TOMLの記法についてまとめます。
TOMLとは TOMLとは、設定ファイルを記述するための言語です。 明瞭な文法のため、人間に読みやすくなっています。
コメント コメントは # から改行までがコメントになります。
# これはコメント key = &amp;quot;value&amp;quot; # ここもコメント 型を表現 key1 = &amp;quot;文字列&amp;quot; key2 = &amp;quot;文字列\&amp;quot;エスケープ&amp;quot; # エスケープでダブルコーテーションを入れられる key3 = &amp;quot;&amp;quot;&amp;quot; 複数行文字列 &amp;quot;&amp;quot;&amp;quot; key4 = 1 # 整数 key5 = 2.1 # 少数 key6 = true # ブーリアン key7 = false # ブーリアン key8 = 1979-05-27T07:32:00Z # 日付 key9 = [1, 2, 3] # 配列 テーブル [テーブル名]でテーブルを定義できます。
[table] key1 = &amp;quot;value1&amp;quot; [foo.bar] key2 = &amp;quot;value2&amp;quot; これをJSONに変換すると以下のようになります。</description>
    </item>
    
    <item>
      <title>Hugoの文法を理解する</title>
      <link>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-syntax/</link>
      <pubDate>Fri, 26 Feb 2021 11:27:35 +0900</pubDate>
      
      <guid>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-syntax/</guid>
      <description>Hugoのテーマを自作やカスタマイズするにあたり、必要そうな文法をまとめます。
変数 変数の定義は、変数名に $ を付け、 := で代入します。
{{ $変数名 := 値 }} 参照するときは、 $変数名 とします。
&amp;lt;p&amp;gt;{{ $x }}&amp;lt;/p&amp;gt; 例）
{{ $hello := &amp;quot;Hello&amp;quot; }} &amp;lt;p&amp;gt;{{ $hello }}&amp;lt;/p&amp;gt; ↓
&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt; パイプ | を使うことで、
{{ $hello := &amp;quot;HUGO&amp;quot; | printf &amp;quot;%s World!&amp;quot; | printf &amp;quot;Hello %s.&amp;quot; }} &amp;lt;p&amp;gt;{{ $hello }}&amp;lt;/p&amp;gt; ↓
Hello HUGO World! range 変数をループ処理できます。
&amp;lt;ul&amp;gt; {{ range $page := .Site.AllPages }} &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ $page.RelPermalink }}&amp;quot;&amp;gt;{{ $page.Title }}&amp;lt;/a&amp;gt; {{ end }} &amp;lt;/ul&amp;gt; With 変数にアクセスできるスコープを限定できます。</description>
    </item>
    
    <item>
      <title>HugoのLayoutについて理解する</title>
      <link>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-layout/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0900</pubDate>
      
      <guid>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-layout/</guid>
      <description>HugoのLayoutの中身について理解していきます。
Layoutの中身は要はテンプレートで、各種ページのHTMLがレンダリングされる際にこれらのテンプレートが使用されます。
Hugoのページ構成 Section Page Templates
Contentディレクトリ HTMLレンダリング前の構成は以下のようになります。
content/ ├── _index.html（ホームページ） ├── page-1.md（通常ページ） ├── page-2.md（通常ページ） ├── section-1/ │ ├── _index.html（セクションページ） │ ├── page-1-1.html（通常ページ） │ └── page-1-2.html（通常ページ） └── section-2/ ├── _index.html（セクションページ） ├── page-2-1.html（通常ページ） └── page-2-2.html（通常ページ） これらの各ページに対してHugoが適用するテンプレートを優先度付けしています。
ページの種類 テンプレートが適用されて、HTMLレンダリング後のページの種類は以下のようになります。
   種類 説明 例     home ホームページ /index.html   page 通常ページ /posts/{投稿名}/index.html   section セクションページ /{セクション名}/index.html   taxonomy 分類一覧ページ /tags/index.html や /categories/index.html   term 分類絞り込みページ /tags/{タグ名}/index.</description>
    </item>
    
    <item>
      <title>Hugoのディレクトリ構造を理解する</title>
      <link>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-directorystructure/</link>
      <pubDate>Sun, 14 Feb 2021 09:27:35 +0900</pubDate>
      
      <guid>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-directorystructure/</guid>
      <description>Hugoで生成される構造 . ├── config.toml ├── archetypes ├── content ├── data ├── layouts ├── static └── themes 参照: Directory Structure
config.toml Hugoの設定を記述します。
環境毎に設定を変更したい場合は、configディレクトリが有効です。（configディレクトリはデフォルトでは作成されない）
configディレクトリを使用することで、環境ごとの追加設定を定義することもできます。
archetypes 新しいコンテンツを追加する際のテンプレートを定義できます。
参照: Archetypes
content 記事を入れるディレクトリです。
このディレクトリ構造はそのまま記事のURLになります。
それぞれのディレクトリは、セクションとして扱われます。
例えば、 blog , articles , tutorials のように、記事をセクション分けしたい場合は、
content/blog , content/articles , content/tutorials のようにディレクトリを作るだけです。
data 設定ファイルを使用したい場合に、このディレクトリを使用できます。
YAML, JSON, TOMLなどのフォーマットで定義できます。
サンプルはここにあります。
layouts 画像、CSS、JavaScriptなどのような、静的コンテンツ(動的に変わらないコンテンツ)を配置します。
サイトをビルドすると、staticディレクトリのコンテンツはそのままビルド結果にコピーされます。
resources このディレクトリはデフォルトでは作成されません。
キャッシュなどのスピードアップのためなどに使用されるディレクトリです。</description>
    </item>
    
    <item>
      <title>Hugoの記事をタクソノミーで分類する</title>
      <link>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-taxonomy/</link>
      <pubDate>Sun, 14 Feb 2021 09:27:35 +0900</pubDate>
      
      <guid>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-taxonomy/</guid>
      <description>Hugoを使って記事を分類してみます。
Hugoのデフォルトでの記事の分類方法    種類 説明     section ディレクトリで分類 例)/{section_name}/index.html   tag 記事にタグを付けて分類   category 記事にカテゴリを付けて分類。カテゴリは階層化できる   series シリーズ物の記事を作れる    Hugoで記事を分類する方法一覧 Hugoで記事を分類する方法は複数あります。
| セクション | contentディレクトリ以下にフォルダを作ると、セクションになります ｜ | タグ | 記事毎にタグを設定し、記事を分類します ｜ | カテゴリ | タグと似ていますが、カテゴリは階層構造を持つことができます｜
Taxonomyってなんですか？ Taxonomyは「分類(法)」のこと。 例えば、映画を例に挙げると&amp;hellip;
Actor &amp;lt;- Taxonomy Bruce Willis &amp;lt;- Term The Sixth Sense &amp;lt;- Value Unbreakable &amp;lt;- Value Moonrise Kingdom &amp;lt;- Value Samuel L. Jackson &amp;lt;- Term Unbreakable &amp;lt;- Value The Avengers &amp;lt;- Value xXx &amp;lt;- Value この用に、 -どういう切り口で分類するか- がTaxonomyです。</description>
    </item>
    
    <item>
      <title>Markdown記法一覧</title>
      <link>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-markdownsamples/</link>
      <pubDate>Sun, 14 Feb 2021 09:27:35 +0900</pubDate>
      
      <guid>https://choihack.com/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/hugo-markdownsamples/</guid>
      <description>改行 &amp;lt;br&amp;gt; or スペース2つ  見出し # 見出し1 ## 見出し2 ### 見出し3 ↓
見出し1 見出し2 見出し3 見出し4 見出し5  番号リスト 1. 番号リスト1 2. 番号リスト2 ↓
 番号リスト1 番号リスト2   リスト - リスト1 - リスト2 ↓
 リスト1 リスト2   インライン `インライン` ↓
インライン
 コード ``` で囲む
 リンク [リンク](https://example.com/) [リンク](https://example.com/ &amp;quot;タイトル&amp;quot;) ↓
リンク リンク
 画像 ![代替えテキスト](/images/icon.png) ![代替えテキスト](/images/icon.png &amp;quot;タイトル&amp;quot;)  太字 **太字** ↓
太字
 打ち消し線 ~~打ち消し線~~ ↓</description>
    </item>
    
  </channel>
</rss>
