<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programings on 東京ライフハッカー</title>
    <link>https://peperon4141.github.io/life_hack/programing/</link>
    <description>Recent content in Programings on 東京ライフハッカー</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Feb 2021 00:00:00 +0900</lastBuildDate><atom:link href="https://peperon4141.github.io/life_hack/programing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HugoのLayoutについて理解する</title>
      <link>https://peperon4141.github.io/life_hack/programing/hugo-layout/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0900</pubDate>
      
      <guid>https://peperon4141.github.io/life_hack/programing/hugo-layout/</guid>
      <description>HugoのLayoutの中身について理解していきます。
Layoutの中身は要はテンプレートで、各種ページのHTMLがレンダリングされる際にこれらのテンプレートが使用されます。
Hugoのページ構成 Section Page Templates
Contentディレクトリ HTMLレンダリング前の構成は以下のようになります。
content/ ├── _index.html（ホームページ） ├── page-1.md（通常ページ） ├── page-2.md（通常ページ） ├── section-1/ │ ├── _index.html（セクションページ） │ ├── page-1-1.html（通常ページ） │ └── page-1-2.html（通常ページ） └── section-2/ ├── _index.html（セクションページ） ├── page-2-1.html（通常ページ） └── page-2-2.html（通常ページ） これらの各ページに対してHugoが適用するテンプレートを優先度付けしています。
ページの種類 テンプレートが適用されて、HTMLレンダリング後のページの種類は以下のようになります。
   種類 説明 例     home ホームページ /index.html   page 通常ページ /posts/{投稿名}/index.html   section セクションページ /{セクション名}/index.html   taxonomy 分類一覧ページ /tags/index.html や /categories/index.html   term 分類絞り込みページ /tags/{タグ名}/index.</description>
    </item>
    
    <item>
      <title>Hugoで記事を分類する！タクソノミー</title>
      <link>https://peperon4141.github.io/life_hack/programing/hugo-taxonomy/</link>
      <pubDate>Sun, 14 Feb 2021 09:27:35 +0900</pubDate>
      
      <guid>https://peperon4141.github.io/life_hack/programing/hugo-taxonomy/</guid>
      <description>Hugoを使って記事を分類してみます。
Hugoの記事の種類一覧    種類 説明 例     home ホームページ /index.html   page 投稿ページ /posts/post_name/index.html   section セクションページ /section_name/index.html   taxonomy 分類ページ /tags/index.html /categories/index.html    Hugoで記事を分類する方法一覧 Hugoで記事を分類する方法は複数あります。
| セクション | contentディレクトリ以下にフォルダを作ると、セクションになります ｜ | タグ | 記事毎にタグを設定し、記事を分類します ｜ | カテゴリ | タグと似ていますが、カテゴリは階層構造を持つことができます｜
Taxonomyってなんですか？ Taxonomyは「分類(法)」のこと。 例えば、映画を例に挙げると&amp;hellip;
Actor &amp;lt;- Taxonomy Bruce Willis &amp;lt;- Term The Sixth Sense &amp;lt;- Value Unbreakable &amp;lt;- Value Moonrise Kingdom &amp;lt;- Value Samuel L.</description>
    </item>
    
    <item>
      <title>Hugoのディレクトリ構造を理解する</title>
      <link>https://peperon4141.github.io/life_hack/programing/hugo-directorystructure/</link>
      <pubDate>Sun, 14 Feb 2021 09:27:35 +0900</pubDate>
      
      <guid>https://peperon4141.github.io/life_hack/programing/hugo-directorystructure/</guid>
      <description>Hugoで生成されるディレクトリやファイルの構造を理解します。
Hugoで生成される構造 . ├── config.toml ├── archetypes ├── content ├── data ├── layouts ├── static └── themes 参照: Directory Structure
config.toml Hugoの設定を記述します。
環境毎に設定を変更したい場合は、configディレクトリが有効です。（configディレクトリはデフォルトでは作成されません） configディレクトリを使用することで、環境ごとの追加設定を定義することもできます。
archetypes 新しいコンテンツを追加する際のテンプレートを定義できます。 参照: Archetypes
content 記事を入れるディレクトリです。 このディレクトリ構造はそのまま記事のURLになります。 それぞれのディレクトリは、セクションとして扱われます。
例えば、 blog , articles , tutorials のように、記事をセクション分けしたい場合は、 content/blog , content/articles , content/tutorials のようにディレクトリを作るだけです。
data 設定ファイルを使用したい場合に、このディレクトリを使用できます。 YAML, JSON, TOMLなどのフォーマットで定義できます。
サンプルはここにあります。
layouts 画像、CSS、JavaScriptなどのような、静的コンテンツ(動的に変わらないコンテンツ)を配置します。 サイトをビルドすると、staticディレクトリのコンテンツはそのままビルド結果にコピーされます。
resources このディレクトリはデフォルトでは作成されません。 キャッシュなどのスピードアップのためなどに使用されるディレクトリです。</description>
    </item>
    
    <item>
      <title>Markdown記法一覧</title>
      <link>https://peperon4141.github.io/life_hack/programing/hugo-markdownsamples/</link>
      <pubDate>Sun, 14 Feb 2021 09:27:35 +0900</pubDate>
      
      <guid>https://peperon4141.github.io/life_hack/programing/hugo-markdownsamples/</guid>
      <description>改行 &amp;lt;br&amp;gt; or スペース2つ  見出し # 見出し1 ## 見出し2 ### 見出し3 ↓
見出し1 見出し2 見出し3 見出し4 見出し5  番号リスト 1. 番号リスト1 2. 番号リスト2 ↓
 番号リスト1 番号リスト2   リスト - リスト1 - リスト2 ↓
 リスト1 リスト2   インライン `インライン` ↓
インライン
 コード ``` で囲む
 リンク [リンク](https://example.com/) [リンク](https://example.com/ &amp;quot;タイトル&amp;quot;) ↓
リンク リンク
 画像 ![代替えテキスト](/images/icon.png) ![代替えテキスト](/images/icon.png &amp;quot;タイトル&amp;quot;)  太字 **太字** ↓
太字
 打ち消し線 ~~打ち消し線~~ ↓</description>
    </item>
    
  </channel>
</rss>
